# -*- coding: utf-8 -*-
"""Desafio_parte_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_09OxNHZI36eQtiwA-9-4nL0D7yBaxf
"""

#importando bibliotecas
import pandas as pd
import numpy as np
import io
import datetime as dt
from numpy import sin, cos, pi
import matplotlib.pyplot as plt
from scipy import signal

"""***Tratamento de Dados***
 
 Para iniciar preferi fazer o processo com o primeiro Daraframe para visualizar melhor e assim aplicar aos demais 

"""

#impoortando o dataframe 1
df_1_1658799298_1658799343 = pd.read_csv('./1658799298 - 1658799343.csv')

#renomeando colunas
df_data = pd.DataFrame([{"data_inicio" : 1658799298, "data_fim" : 1658799298}])

df_data.head()

#verificando 
df_1_1658799298_1658799343.info()

df_1_1658799298_1658799343.columns

#renomenado colunas
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.rename(columns={'-8.84' : "ac_x", '0.97' : "ac_y", '0.02' : "ac_z", '38.6' : "temperatura"})

#inserindo valores do cabeçalho na amostra
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append({'ac_x' : -8.84, 'ac_y' : 0.97, 'ac_z': 0.02, "temperatura" : 38.6}, ignore_index=True)

df_1_1658799298_1658799343.tail()

#convertendo variaveis para float
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.astype(float)

df_1_1658799298_1658799343.info()

"""Nesta parte em que foi necessario lidar com varias numerações após copiar os nomes dos arquivos fiz uso do atalho Crl + D que permitiu uma digitação mais rapida. Também foi feito uso do excel com formulas de corte e concatenação de strings para agilizar o processo de digitação de comando e diminuir a probabilidade de erros."""

#Importando demais amostras
df_2_1658802974_1658803028= pd.read_csv('./1658802974 - 1658803028.csv')
df_3_1658806645_1658806713= pd.read_csv('./1658806645 - 1658806713.csv')
df_4_1658810330_1658810396= pd.read_csv('./1658810330 - 1658810396.csv')
df_5_1658814024_1658814091= pd.read_csv('./1658814024 - 1658814091.csv')
df_6_1658817708_1658817775= pd.read_csv('./1658817708 - 1658817775.csv')
df_7_1658821392_1658821458= pd.read_csv('./1658821392 - 1658821458.csv')
df_8_1658825079_1658825146= pd.read_csv('./1658825079 - 1658825146.csv')
df_9_1658828764_1658828830= pd.read_csv('./1658828764 - 1658828830.csv')
df_10_1658832447_1658832513= pd.read_csv('./1658832447 - 1658832513.csv')
df_11_1658836130_1658836198= pd.read_csv('./1658836130 - 1658836198.csv')
df_12_1658839814_1658839881= pd.read_csv('./1658839814 - 1658839881.csv')
df_13_1658843497_1658843562= pd.read_csv('./1658843497 - 1658843562.csv')
df_14_1658847180_1658847247= pd.read_csv('./1658847180 - 1658847247.csv')
df_15_1658850864_1658850930= pd.read_csv('./1658850864 - 1658850930.csv')
df_16_1658854547_1658854613= pd.read_csv('./1658854547 - 1658854613.csv')
df_17_1658858236_1658858304= pd.read_csv('./1658858236 - 1658858304.csv')
df_18_1658861926_1658861992= pd.read_csv('./1658861926 - 1658861992.csv')
df_19_1658865611_1658865678= pd.read_csv('./1658865611 - 1658865678.csv')
df_20_1658869293_1658869360= pd.read_csv('./1658869293 - 1658869360.csv')

#renomeando colunas
df_2_1658802974_1658803028.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"]
df_3_1658806645_1658806713.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_4_1658810330_1658810396.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_5_1658814024_1658814091.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_6_1658817708_1658817775.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_7_1658821392_1658821458.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_8_1658825079_1658825146.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_9_1658828764_1658828830.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_10_1658832447_1658832513.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_11_1658836130_1658836198.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_12_1658839814_1658839881.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_13_1658843497_1658843562.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_14_1658847180_1658847247.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_15_1658850864_1658850930.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_16_1658854547_1658854613.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_17_1658858236_1658858304.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_18_1658861926_1658861992.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_19_1658865611_1658865678.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"] 
df_20_1658869293_1658869360.columns = ['ac_x', 'ac_y', 'ac_z', "temperatura"]

"""A conversão das datas foram feitas em massa no site indicado. ao pesquisar antes disso consequi uma biblioteca que faz a transformação, porém ao checar foi notado que as datas divergiam das convertidas no site."""

inicio_1 = "26/07/2022 01:34"
inicio_2 = "26/07/2022 02:36"
inicio_3 = "26/07/2022 03:37"
inicio_4 = "26/07/2022 04:38"
inicio_5 = "26/07/2022 05:40"
inicio_6 = "26/07/2022 06:41"
inicio_7 = "26/07/2022 07:43"
inicio_8 = "26/07/2022 08:44"
inicio_9 = "26/07/2022 09:46"
inicio_10 = "26/07/2022 10:47"
inicio_11 = "26/07/2022 11:48"
inicio_12 = "26/07/2022 12:50"
inicio_13 = "26/07/2022 13:51"
inicio_14 = "26/07/2022 14:53"
inicio_15 = "26/07/2022 15:54"
inicio_16 = "26/07/2022 16:55"
inicio_17 = "26/07/2022 17:57"
inicio_18 = "26/07/2022 18:58"
inicio_19 = "26/07/2022 20:00"
inicio_20 = "26/07/2022 21:01"
fim_1 = "26/07/2022 01:35"
fim_2 = "26/07/2022 02:37"
fim_3 = "26/07/2022 03:38"
fim_4 = "26/07/2022 04:39"
fim_5 = "26/07/2022 05:41"
fim_6 = "26/07/2022 06:42"
fim_7 = "26/07/2022 07:44"
fim_8 = "26/07/2022 08:45"
fim_9 = "26/07/2022 09:47"
fim_10 = "26/07/2022 10:48"
fim_11 = "26/07/2022 11:49"
fim_12 = "26/07/2022 12:51"
fim_13 = "26/07/2022 13:52"
fim_14 = "26/07/2022 14:54"
fim_15 = "26/07/2022 15:55"
fim_16 = "26/07/2022 16:56"
fim_17 = "26/07/2022 17:58"
fim_18 = "26/07/2022 18:59"
fim_19 = "26/07/2022 20:01"
fim_20 = "26/07/2022 21:02"

#Adicionando colinas de datas e horas
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.assign(data_inicio=inicio_1)
df_2_1658802974_1658803028 = df_2_1658802974_1658803028.assign(data_inicio=inicio_2) 
df_3_1658806645_1658806713 = df_3_1658806645_1658806713.assign(data_inicio=inicio_3) 
df_4_1658810330_1658810396 = df_4_1658810330_1658810396.assign(data_inicio=inicio_4) 
df_5_1658814024_1658814091 = df_5_1658814024_1658814091.assign(data_inicio=inicio_5) 
df_6_1658817708_1658817775 = df_6_1658817708_1658817775.assign(data_inicio=inicio_6) 
df_7_1658821392_1658821458 = df_7_1658821392_1658821458.assign(data_inicio=inicio_7) 
df_8_1658825079_1658825146 = df_8_1658825079_1658825146.assign(data_inicio=inicio_8) 
df_9_1658828764_1658828830 = df_9_1658828764_1658828830.assign(data_inicio=inicio_9) 
df_10_1658832447_1658832513 = df_10_1658832447_1658832513.assign(data_inicio=inicio_10) 
df_11_1658836130_1658836198 = df_11_1658836130_1658836198.assign(data_inicio=inicio_11) 
df_12_1658839814_1658839881 = df_12_1658839814_1658839881.assign(data_inicio=inicio_12) 
df_13_1658843497_1658843562 = df_13_1658843497_1658843562.assign(data_inicio=inicio_13) 
df_14_1658847180_1658847247 = df_14_1658847180_1658847247.assign(data_inicio=inicio_14) 
df_15_1658850864_1658850930 = df_15_1658850864_1658850930.assign(data_inicio=inicio_15) 
df_16_1658854547_1658854613 = df_16_1658854547_1658854613.assign(data_inicio=inicio_16) 
df_17_1658858236_1658858304 = df_17_1658858236_1658858304.assign(data_inicio=inicio_17) 
df_18_1658861926_1658861992 = df_18_1658861926_1658861992.assign(data_inicio=inicio_18) 
df_19_1658865611_1658865678 = df_19_1658865611_1658865678.assign(data_inicio=inicio_19) 
df_20_1658869293_1658869360 = df_20_1658869293_1658869360.assign(data_inicio=inicio_20)

df_1_1658799298_1658799343 = df_1_1658799298_1658799343.assign(data_fim=fim_1)
df_2_1658802974_1658803028 = df_2_1658802974_1658803028.assign(data_fim=fim_2) 
df_3_1658806645_1658806713 = df_3_1658806645_1658806713.assign(data_fim=fim_3) 
df_4_1658810330_1658810396 = df_4_1658810330_1658810396.assign(data_fim=fim_4) 
df_5_1658814024_1658814091 = df_5_1658814024_1658814091.assign(data_fim=fim_5) 
df_6_1658817708_1658817775 = df_6_1658817708_1658817775.assign(data_fim=fim_6) 
df_7_1658821392_1658821458 = df_7_1658821392_1658821458.assign(data_fim=fim_7) 
df_8_1658825079_1658825146 = df_8_1658825079_1658825146.assign(data_fim=fim_8) 
df_9_1658828764_1658828830 = df_9_1658828764_1658828830.assign(data_fim=fim_9) 
df_10_1658832447_1658832513 = df_10_1658832447_1658832513.assign(data_fim=fim_10) 
df_11_1658836130_1658836198 = df_11_1658836130_1658836198.assign(data_fim=fim_11) 
df_12_1658839814_1658839881 = df_12_1658839814_1658839881.assign(data_fim=fim_12) 
df_13_1658843497_1658843562 = df_13_1658843497_1658843562.assign(data_fim=fim_13) 
df_14_1658847180_1658847247 = df_14_1658847180_1658847247.assign(data_fim=fim_14) 
df_15_1658850864_1658850930 = df_15_1658850864_1658850930.assign(data_fim=fim_15) 
df_16_1658854547_1658854613 = df_16_1658854547_1658854613.assign(data_fim=fim_16) 
df_17_1658858236_1658858304 = df_17_1658858236_1658858304.assign(data_fim=fim_17) 
df_18_1658861926_1658861992 = df_18_1658861926_1658861992.assign(data_fim=fim_18) 
df_19_1658865611_1658865678 = df_19_1658865611_1658865678.assign(data_fim=fim_19) 
df_20_1658869293_1658869360 = df_20_1658869293_1658869360.assign(data_fim=fim_20)

df_1_1658799298_1658799343

#Juntando dataframes
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_2_1658802974_1658803028, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_3_1658806645_1658806713, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_4_1658810330_1658810396, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_5_1658814024_1658814091, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_6_1658817708_1658817775, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_7_1658821392_1658821458, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_8_1658825079_1658825146, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_9_1658828764_1658828830, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_10_1658832447_1658832513, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_11_1658836130_1658836198, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_12_1658839814_1658839881, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_13_1658843497_1658843562, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_14_1658847180_1658847247, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_15_1658850864_1658850930, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_16_1658854547_1658854613, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_17_1658858236_1658858304, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_18_1658861926_1658861992, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_19_1658865611_1658865678, ignore_index=True)
df_1_1658799298_1658799343 = df_1_1658799298_1658799343.append(df_20_1658869293_1658869360, ignore_index=True)

df_1_1658799298_1658799343.info()

df = df_1_1658799298_1658799343

df.head()

#convertendo datas
df['data_inicio'] = pd.to_datetime(df['data_inicio'], format="%d/%m/%Y %H:%M")
df['data_fim'] = pd.to_datetime(df['data_fim'], format="%d/%m/%Y %H:%M")

"""Criando coluna de variação do tempo das medições, mais na frente entendi que essa coluna deveria ser preenchida com numeros randomicos entre 0.59 e 0.55 segundos"""

df["tempo_variacao"] = df['data_fim'] - df["data_inicio"]

df.head()

ac_x = df["ac_x"]

df.tempo_variacao.unique()

df_ac_x = df_ac_x.set_index("variacao_tempo_(s)")

df_ac_x.info()

def get_psd(df_ac_x,bin_width):
  fs = len(df_ac_x)/(df_ac_x.index[-1]-df_ac_x.index[0])
  f, psd = signal.welch(df_ac_x.to_numpy(), 
                        fs=fs, 
                        nperseg=fs/bin_width,
                        window='hanning',
                        axis=0
                        )

  df_ac_x_psd = pd.DataFrame(psd,columns=df_ac_x.columns)
  df_ac_x_psd.columns
  df_ac_x_psd['Frequency (Hz)'] = f
  return df_ac_x_psd.set_index('Frequency (Hz)')

psd = get_psd(,1.0)
psd

df['ac_x'][0:1000].plot(figsize=(20, 12))

df['ac_y'].plot(figsize=(20, 12))

df['ac_z'].plot(figsize=(20, 12))

"""***Analise***
Ao analisar a junção das variaveis é possivel admitir que o equipamento estava desbalanceado até as pouco mais que 12 horas do dia 26, no intervalo entre a as 4 e as 8 da manhã é possivel dizer que é o periodo em que a maquina estava desligada, assim como em todos os intervalos em que as acelerações tem esse mesmo comportamento, nos demias intervalos que não seguem esse comportamento o equipamento estava ligado. Para definir quando a maquina estaria ligada é necessario adotar um intervalo como na ac_x que quando desligada fica num valor proximo a -9 e -8, e fazer a criação de uma coluna aplicando os respectivos intervalos para a condição.



"""

plt.style.use("fivethirtyeight")

plt.figure(figsize=(12, 10))

df.plot( figsize=(12, 15))

df.plot(kind = 'density', subplots=True, layout=(4, 4), figsize=(15, 10));